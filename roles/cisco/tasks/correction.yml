- name: charger règles cis
  include_vars:
    file: "{{ ansible_config_file | dirname }}/cis_ios15_complet.yml"
    name: cis


- name: backup config 
  copy:
    src: "{{ ansible_config_file | dirname }}/config/{{ inventory_hostname }}_running_config.txt"
    dest: "{{ ansible_config_file | dirname }}/config/backup/backup_{{ inventory_hostname }}_running_config.txt"

#- name: récup fichier de correction
#  set_fact:
#    correctif_file: "{{ ansible_config_file | dirname }}/correctif/{{ inventory_hostname }}_nok.txt"
#    #commandes: "{{lookup('file', correctif_file) 

- name: test slurp
  slurp:
    src: "{{ ansible_config_file | dirname }}/correctif/{{ inventory_hostname }}_nok.txt"
  register: correctif_file



- name: test création dico
  set_fact:
#    commandes: "{{lookup('file', correctif_file) | map('split','\n',1) |map('split',':',1)| map('zip',['titre','commande'])|map('combine')|list}}"
#    commandes: "{{correctif_file.content | b64decode |  map('split','\n',1) |map('split',':',1)| map('zip',['titre','commande'])|map('combine')|list}}"
    commandes: "{{ commandes | default([]) + [{'titre':item.split(':')[0] | trim, 'commande':item.split(':')[1] | trim}] }}"
  loop: "{{ correctif_file.content | b64decode | regex_findall('^[0-9.]+:.*$', multiline=True) }}"

- name: test existance fichier param 
  stat:
    path:  "{{ ansible_config_file | dirname }}/correctif/param/{{ inventory_hostname }}_param.txt"
  register: param_defined

- name: récup fichier param 
  include_vars:
    file: "{{ ansible_config_file | dirname }}/correctif/param/{{ inventory_hostname }}_param.txt"
    name: param_file
  when: param_defined.stat.exists
  ignore_errors: yes

- name: création + init param 
  block:
    - name: init param file si vide
      copy:
        content: "{}"
        dest: "{{ ansible_config_file | dirname }}/correctif/param/{{ inventory_hostname }}_param.txt"
    
    - name: init 
      include_vars:
        file: "{{ ansible_config_file | dirname }}/correctif/param/{{ inventory_hostname }}_param.txt"
        name: param_file
  when: not param_defined.stat.exists


- name: user prompt commande manquante 
  pause:
    prompt: " Entrez un paramètre pour : {{item.commande}} (laisser vide si pas de paramètres)"
  register: param_input
  when: item.titre not in param_file and ("{" in item.commande or "<" in item.commande )
  loop: "{{commandes}}"
  loop_control:
    label: "{{item.titre}}"

- name: debug2
  debug:
    var: param_input.results

- name: ajouteur le paramètre au fichier 
  set_fact:
    new_params: "{{ new_params | default([])| combine({item.titre: item.user_input}) }}"
  when: item.titre not in param_file and ("{" in item.commande or "<" in item.commande )
  loop: "{{param_input.results}}"
  loop_control:
    label: "{{item.titre}}"

- name: sauver params
  copy:
    content: "{{ new_params | to_nice_yaml}}"
    dest: "{{ ansible_config_file | dirname }}/correctif/param/{{ inventory_hostname }}_param.txt"

- name: commande concat 
  ansible.builtin.template:
    src: "templates/template_correctif_auto.jinja"
    dest: "{{ ansible_config_file | dirname }}/correctif/{{ inventory_hostname }}_commandes_param.txt"

- name: charger les commandes finales
  set_fact:
    missing_commands: "{{ lookup('file', 'correctif/' + inventory_hostname + '_commandes_param.txt') | trim | from_yaml }}"

- name: Demander la confirmation pour appliquer les modifs sur la config
  pause:
    prompt: "Êtes-vous certain d'appliquer les modifications sur la configuration ? (y/n)"
  register: validation

- name: Correction de la configuration
  cisco.ios.ios_config:
    lines: "{{missing_commands}}"
  when: validation.user_input == "y" and validation.user_input is defined